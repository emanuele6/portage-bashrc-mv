portage-bashrc-mv-22.0
----------------------
- Add support for RUSTFLAGS, particularly quote -C to subsequent parameter, see
  https://github.com/vaeth/portage-bashrc-mv/issues/33
- Document rules for implicit quoting to subsequent parameter
- Do not implicitly quote for other VAR to subsequent parameter except
  CFLAGS, CXXFLAGS, LDFLAGS
- Do not filter some flags supported by current clang, see
  https://github.com/vaeth/portage-bashrc-mv/issues/34

portage-bashrc-mv-21.1
----------------------
- Enlarge the explicit list; thanks to Steven Newbury
  https://github.com/sjnewbury for the contribution.

portage-bashrc-mv-21.0
----------------------
- Attempt to handle arguments with parameters using an explicit list, see
  https://github.com/vaeth/portage-bashrc-mv/issues/10

portage-bashrc-mv-20.7
----------------------
- Filter -flto-odr-type-merging with USE_NONGNU=1

portage-bashrc-mv-20.6
----------------------
- Alessandro-Barbieri: Filter warnings not available in clang

portage-bashrc-mv-20.5
----------------------
- Jannik2099: filter LTO-requiring flags if LTO is not enabled on clang
- jiblime: Set USE_NONGNU=1 by default with active USE flag clang

portage-bashrc-mv-20.4
----------------------
- enable -fstack-clash-protection on clang

portage-bashrc-mv-20.3
----------------------
- Even more non-GNU

portage-bashrc-mv-20.2
----------------------
- More non-GNU

portage-bashrc-mv-20.1
----------------------
- SPDX-License-Identifier

portage-bashrc-mv-20.0
----------------------
- Backward-incompatible change:
  /-foo/-bar will not add -bar if -foo cannot be found.
  The previous behaviour can be achieved by /-foo/-bar -bar.
  As a side-effect, do not unconditionally add -fstack-check for non-GNU.
- Output C++ and LD version.

portage-bashrc-mv-19.0
----------------------
Support F*FLAGS, and let *FLAGS= and *FLAGS+= include F*FLAGS.
You can use C*FLAGS=... LDFLAGS= OPTLDFLAGS= or C*FLAGS+=, respectively,
if you do not like the latter two.

portage-bashrc-mv-18.1
----------------------
Support QLOP_COUNT (default 3). Thanks to guitoo for the suggestion,
see https://github.com/vaeth/portage-bashrc-mv/issues/18
Also evaluate NOQLOP according to the usual true/false logic.

portage-bashrc-mv-18.0
----------------------
It is now possible to set NOQLOP to skip the qlop feature (e.g. for
comptability problems with old qlop versions). In addition, the FLAG feature
is now the first file parsed so that it /etc/portage/package.cflags can be
used to set this variable.
The AUTHORS file now finally contains the contributor to 17.3:
Sorry, I had changed it immediately but had forgotten to commit.


portage-bashrc-mv-17.0
----------------------
No longer work with <app-portage/portage-utils-0.74-r1, but support instead
>=app-portage/portage-utils-0.80_pre20190605.


portage-bashrc-mv-16.0
----------------------
New localepurge configuration; ignore that of app-admin/localepurge


portage-bashrc-mv-15.0
----------------------
Support MESONDEDUP:
>=meson-0.47 had the insane idea to forbid the user to specify flags
simultaneously in e.g. LDFLAGS and CFLAGS.
Although the same flags must necessarily be specified in some cases during
compile and link phase, meson insists to have the sole decision about this,
thus breaking with *FLAGS meant to be used also for other build systems.
As a workaround, portage-bashrc-mv now supports a variable MESONDEDUP:
If this variable is true then all flags from LDFLAGS which can occur
already in some other compile phase are removed.


portage-bashrc-mv-14.4
----------------------
unless CCACHE_HASHDIR is set to true, CCACHE_NOHASHDIR is now set.
This effectively means that the ccache default of that variable is inverted.
This should increase the number of ccache hits in average although in some
cases it might cause issues: Try setting CCACHE_HASHDIR=1 in case of
miscompilations with ccache.


portage-bashrc-mv-14.0
----------------------
Improve support/customization for filtering *FLAGS depending on the compiler.


portage-bashrc-mv-13.0
----------------------

Important!

If you use >=portage-2.2.15 and have previously used <portage-bashrc-mv-13
you will get problems, because <portage-bashrc-mv-13 modified EBUILD_PHASE
which has been declared readonly in >=portage-2.2.15, and thus modification
leads to an error abort of portage.
In this case you have to run once

fix-portage-2.2.15 [if you use prefix-portage, use your $EPREFIX as argument]

This command will fix the environment.bz2 files in ${1%/}/var/db/pkg
which were generated with <portage-bashrc-mv-13 and which are
incompatible with the mentioned change in portage-2.2.15

(Unfortunately, it is not possible to fix this in portage-bashrc-mv alone,
since environment.bz2 is used for unmerging, overriding portage-bashrc-mv.)

Execute fix-portage-2.2.15 as the first command after upgrading portage-2.2.15!
